#set($classe = ${model.elementName})
#set($vo = $stringUtils.uncapitalise(${model.elementName}))
#if($package)
package $package;
#end

import $model.fullyName;
import java.util.Collection;
import java.util.Map;
import java.util.HashMap;
import com.opensymphony.xwork.ActionContext;
import com.opensymphony.xwork.Action;
import com.opensymphony.xwork.ActionSupport;
import com.opensymphony.xwork.Preparable;

/**
 * Show how to use the Prepare Interceptor.
 * 
 * This is a simple CRUD application, that hold all objects in the user session.
 *
 * Only the save() method uses the prepareStack
 *
 * author $author
 */
public class $class extends ActionSupport implements Preparable {
	private static final String MAP_SESSION_KEY = "SESSION_${classe}_KEY";

	/**
	 * A simple HashMap  :-) It will be put in the user Session to simulate a database
	 */
	private Map ${vo}Manager = null;

	//To simulare a database increment column
	private static int nexId = 1;

	private Collection ${vo}s = null;

	private $model.name $vo;

	/**
	 * @see com.opensymphony.xwork.Action#execute()
	 */
	public String execute() throws Exception {
		return Action.SUCCESS;
	}

	public String list() throws Exception {
		${vo}s = get${classe}Manager().values();

		return Action.SUCCESS;
	}

	public String load() throws Exception {
		System.out.println("2: load");

		${vo} = ($classe) get${classe}Manager().get(${vo}.getId());

		return Action.SUCCESS;
	}

	public String save() throws Exception {
		System.out.println("3: save");

		//Auto-Increment: nexId++. Just to simulate the database
		if(${vo}.getId()==null) {
			Long id = new Long(nexId++);
			${vo}.setId(id);
		}

		/** 
		* you can set the params on your action to get the id of the object, 
		* then load it in prepare, then have the params interceptor applied again 
		* to put the properties into the instance you just loaded from the database. 
		* http://forums.opensymphony.com/thread.jspa?threadID=1424&messageID=4378#4378
		**/
		
		//The $vo instance was loaded in the prepare() method, so the parameters interceptor just fill it.
		//Now we can save the instance.
		get${classe}Manager().put(${vo}.getId(),${vo});

		return Action.SUCCESS;
	}

	public String delete() throws Exception {

		get${classe}Manager().remove(${vo}.getId());

		return Action.SUCCESS;
	}

	/**
	 * @see com.opensymphony.xwork.Preparable#prepare()
	 */
	public void prepare() throws Exception {
		System.out.println("1: prepare");
		/**
		 * http://forums.opensymphony.com/thread.jspa?threadID=1256&messageID=3936#3936
		 * Because the "params" interceptor is called before "prepare", 
		 * the ID will be properly set and you can look up the User object. 
		 * Then the "params" interceptor is called again, 
		 * this time setting values like "${vo}.name", etc.
		 **/
		//just call the load() method
		if(${vo}.getId() != null) {
			load();
		}
	}

	public $classe get${classe}(){
		if($vo == null){
			$vo = new ${classe}();
		}
		return $vo;
	}

	public void set${classe}(${classe} $vo){
		this.${vo}=$vo;
	}

	/**
	 * @return
	 */
	public Collection get${classe}s() {
		return ${vo}s;
	}

	/**
	 * To persist the objects in the Session. 
	 * In a real example, probably you use a database
	 * 
	 * @return Returns the Map
	 */
	public Map get${classe}Manager() {
		//Get the session
		Map session =ActionContext.getContext().getSession();
		//Get the Map
		${vo}Manager = (Map) session.get(MAP_SESSION_KEY);
		if(${vo}Manager==null){
			//If the map doesn´t exist in the Session, create it
			${vo}Manager=new HashMap();
			session.put(MAP_SESSION_KEY,${vo}Manager);
		}
		return ${vo}Manager;
	}
}