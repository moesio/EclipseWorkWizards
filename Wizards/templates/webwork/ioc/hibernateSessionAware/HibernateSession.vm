#if($package)
package $package;
#end

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;

/**
* author $author
*/
public class $class implements ${hibernateSessionFactoryEnabler.name}/*, Disposable*/ {
	
	private static final Log LOG = LogFactory.getLog(${class}.class);

	private Session session;
	private Transaction transaction;
	private ${hibernateSessionFactory.name} factory;
	private boolean rollBackOnly;
	
	public Session getSession() throws HibernateException {
		if (session==null) {
			session = factory.getSessionFactory().openSession();
			transaction = session.beginTransaction();
		}
		return session;
	}
	
	public void set${hibernateSessionFactory.name}(${hibernateSessionFactory.name} factory) {
		this.factory = factory;
	}
	
	/*public void dispose() {
		try {
			disposeSession();
		}
		catch (HibernateException he) {
			throw new RuntimeException("could not cleanly dispose() HibernateSession", he);
		}
	}*/

	public void disposeSession() throws HibernateException {
		
		LOG.debug("disposing");

		if (session==null) return;

		if (rollBackOnly) {
			try {
				LOG.debug("rolling back");
				if (transaction!=null) transaction.rollback();
			}
			catch (HibernateException e) {
				LOG.error("error during rollback", e);
				throw e;
			}
			finally {
				session.close();
				session=null;
				transaction=null;
			}
		}
		else {
			try {
				LOG.debug("committing");
				if (transaction!=null) transaction.commit();
			}
			catch (HibernateException e) {
				LOG.error("error during commit", e);
				transaction.rollback();
				throw e;
			}
			finally {
				session.close();
				session=null;
				transaction=null;
			}
		}
	}

	public boolean isRollBackOnly() {
		return rollBackOnly;
	}

	public void setRollBackOnly(boolean rollBackOnly) {
		this.rollBackOnly = rollBackOnly;
	}
}
