#if($package)
package $package;
#end

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.opensymphony.xwork.interceptor.component.Disposable;
import com.opensymphony.xwork.interceptor.component.Initializable;

import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.cfg.Configuration;
import net.sf.hibernate.cfg.Environment;

import java.io.Serializable;

/**
 * @author $author
 *
 * SessionFactory for Hibernate Sessions
 */
public class $class
	implements Initializable, Disposable, Serializable {
	
	private static final Log LOG = LogFactory.getLog(${class}.class);

	private SessionFactory factory;

	public SessionFactory getSessionFactory() {
		return factory;
	}

	public void init() {
		try {
			factory = new Configuration().configure().buildSessionFactory();
		}
		catch (Exception e) {
			LOG.error("error configuring", e);
			throw new RuntimeException( e.getMessage() );
		}
	}

	public void dispose() {
		try {
			factory.close();
		}
		catch (Exception e) {
			LOG.error("error closing", e);
		}
	}

	public String getDialect() {
		return Environment.getProperties().getProperty(Environment.DIALECT);
	}
}