#if($package)package $package;#end

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
/**
	<!-- Hibernate Filter -->
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>$filter.fullyName</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
**/
/**
 * A servlet filter that opens and closes a Hibernate Session for each request.
 * <p>
 * This filter guarantees a sane state, committing any pending database
 * transaction once all other filters (and servlets) have executed. It also
 * guarantees that the Hibernate <tt>Session</tt> of the current thread will
 * be closed before the response is send to the client.
 * <p>
 * 
 * @see HibernateUtil
 * @author $author
 */
public class ${class} implements Filter {

	private static Log log = LogFactory.getLog(${class}.class);

	/**
	 * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
	 */
	public void init(FilterConfig filterConfig) throws ServletException {
		log.info("Servlet filter init, now opening/closing a Session for each request.");
	}

	/**
	 * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response,FilterChain chain) throws IOException, ServletException {

		try {
			HibernateUtil.beginTransaction();

			chain.doFilter(request, response);

			// Commit any pending database transaction.
			HibernateUtil.commitTransaction();
		}catch (Exception e) {
			log.error(e,e);
			HibernateUtil.rollbackTransaction();
		}
		finally {
			// No matter what happens, close the Session.
			HibernateUtil.closeSession();
		}
	}

	public void destroy() {
	}
}